                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.0.0 #6037 (Oct 31 2010) (MINGW32)
                              4 ; This file was generated Fri Jan 13 02:12:10 2017
                              5 ;--------------------------------------------------------
                              6 	.module fruit
                              7 	.optsdcc -mmcs51 --model-small
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _FRUIT_placeInFreeSpace
                             13 	.globl _FRUIT_random
                             14 	.globl _FRUIT_place
                             15 ;--------------------------------------------------------
                             16 ; special function registers
                             17 ;--------------------------------------------------------
                             18 	.area RSEG    (ABS,DATA)
   0000                      19 	.org 0x0000
                             20 ;--------------------------------------------------------
                             21 ; special function bits
                             22 ;--------------------------------------------------------
                             23 	.area RSEG    (ABS,DATA)
   0000                      24 	.org 0x0000
                             25 ;--------------------------------------------------------
                             26 ; overlayable register banks
                             27 ;--------------------------------------------------------
                             28 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                      29 	.ds 8
                             30 ;--------------------------------------------------------
                             31 ; internal ram data
                             32 ;--------------------------------------------------------
                             33 	.area DSEG    (DATA)
   0000                      34 _FRUIT_place_position_1_1:
   0000                      35 	.ds 2
                             36 ;--------------------------------------------------------
                             37 ; overlayable items in internal ram 
                             38 ;--------------------------------------------------------
                             39 	.area OSEG    (OVR,DATA)
                             40 ;--------------------------------------------------------
                             41 ; indirectly addressable internal ram data
                             42 ;--------------------------------------------------------
                             43 	.area ISEG    (DATA)
                             44 ;--------------------------------------------------------
                             45 ; absolute internal ram data
                             46 ;--------------------------------------------------------
                             47 	.area IABS    (ABS,DATA)
                             48 	.area IABS    (ABS,DATA)
                             49 ;--------------------------------------------------------
                             50 ; bit data
                             51 ;--------------------------------------------------------
                             52 	.area BSEG    (BIT)
                             53 ;--------------------------------------------------------
                             54 ; paged external ram data
                             55 ;--------------------------------------------------------
                             56 	.area PSEG    (PAG,XDATA)
                             57 ;--------------------------------------------------------
                             58 ; external ram data
                             59 ;--------------------------------------------------------
                             60 	.area XSEG    (XDATA)
                             61 ;--------------------------------------------------------
                             62 ; absolute external ram data
                             63 ;--------------------------------------------------------
                             64 	.area XABS    (ABS,XDATA)
                             65 ;--------------------------------------------------------
                             66 ; external initialized ram data
                             67 ;--------------------------------------------------------
                             68 	.area XISEG   (XDATA)
                             69 	.area HOME    (CODE)
                             70 	.area GSINIT0 (CODE)
                             71 	.area GSINIT1 (CODE)
                             72 	.area GSINIT2 (CODE)
                             73 	.area GSINIT3 (CODE)
                             74 	.area GSINIT4 (CODE)
                             75 	.area GSINIT5 (CODE)
                             76 	.area GSINIT  (CODE)
                             77 	.area GSFINAL (CODE)
                             78 	.area CSEG    (CODE)
                             79 ;--------------------------------------------------------
                             80 ; global & static initialisations
                             81 ;--------------------------------------------------------
                             82 	.area HOME    (CODE)
                             83 	.area GSINIT  (CODE)
                             84 	.area GSFINAL (CODE)
                             85 	.area GSINIT  (CODE)
                             86 ;--------------------------------------------------------
                             87 ; Home
                             88 ;--------------------------------------------------------
                             89 	.area HOME    (CODE)
                             90 	.area HOME    (CODE)
                             91 ;--------------------------------------------------------
                             92 ; code
                             93 ;--------------------------------------------------------
                             94 	.area CSEG    (CODE)
                             95 ;------------------------------------------------------------
                             96 ;Allocation info for local variables in function 'FRUIT_placeInFreeSpace'
                             97 ;------------------------------------------------------------
                             98 ;position                  Allocated to registers r2 r3 r4 
                             99 ;c                         Allocated to registers 
                            100 ;------------------------------------------------------------
                            101 ;	../fruit.c:17: void FRUIT_placeInFreeSpace(Position *position) {
                            102 ;	-----------------------------------------
                            103 ;	 function FRUIT_placeInFreeSpace
                            104 ;	-----------------------------------------
   0000                     105 _FRUIT_placeInFreeSpace:
                    0002    106 	ar2 = 0x02
                    0003    107 	ar3 = 0x03
                    0004    108 	ar4 = 0x04
                    0005    109 	ar5 = 0x05
                    0006    110 	ar6 = 0x06
                    0007    111 	ar7 = 0x07
                    0000    112 	ar0 = 0x00
                    0001    113 	ar1 = 0x01
                            114 ;	../fruit.c:20: char c = T6963C_readFrom(position->x, position->y);
   0000 AA 82               115 	mov	r2,dpl
   0002 AB 83               116 	mov	r3,dph
   0004 AC F0               117 	mov	r4,b
   0006 12s00r00            118 	lcall	__gptrget
   0009 FD                  119 	mov	r5,a
   000A 74 01               120 	mov	a,#0x01
   000C 2A                  121 	add	a,r2
   000D FE                  122 	mov	r6,a
   000E E4                  123 	clr	a
   000F 3B                  124 	addc	a,r3
   0010 FF                  125 	mov	r7,a
   0011 8C 00               126 	mov	ar0,r4
   0013 8E 82               127 	mov	dpl,r6
   0015 8F 83               128 	mov	dph,r7
   0017 88 F0               129 	mov	b,r0
   0019 12s00r00            130 	lcall	__gptrget
   001C F5*00               131 	mov	_T6963C_readFrom_PARM_2,a
   001E 8D 82               132 	mov	dpl,r5
   0020 C0 02               133 	push	ar2
   0022 C0 03               134 	push	ar3
   0024 C0 04               135 	push	ar4
   0026 C0 06               136 	push	ar6
   0028 C0 07               137 	push	ar7
   002A C0 00               138 	push	ar0
   002C 12s00r00            139 	lcall	_T6963C_readFrom
   002F E5 82               140 	mov	a,dpl
   0031 D0 00               141 	pop	ar0
   0033 D0 07               142 	pop	ar7
   0035 D0 06               143 	pop	ar6
   0037 D0 04               144 	pop	ar4
   0039 D0 03               145 	pop	ar3
   003B D0 02               146 	pop	ar2
                            147 ;	../fruit.c:23: if(c == EMPTY){
   003D 70 1D               148 	jnz	00114$
                            149 ;	../fruit.c:24: T6963C_writeAt(position->x, position->y, FRUIT);
   003F 8A 82               150 	mov	dpl,r2
   0041 8B 83               151 	mov	dph,r3
   0043 8C F0               152 	mov	b,r4
   0045 12s00r00            153 	lcall	__gptrget
   0048 FD                  154 	mov	r5,a
   0049 8E 82               155 	mov	dpl,r6
   004B 8F 83               156 	mov	dph,r7
   004D 88 F0               157 	mov	b,r0
   004F 12s00r00            158 	lcall	__gptrget
   0052 F5*00               159 	mov	_T6963C_writeAt_PARM_2,a
   0054 75*00 95            160 	mov	_T6963C_writeAt_PARM_3,#0x95
   0057 8D 82               161 	mov	dpl,r5
   0059 02s00r00            162 	ljmp	_T6963C_writeAt
   005C                     163 00114$:
                            164 ;	../fruit.c:28: if(T6963C_readFrom(position->x-1, position->y) == EMPTY){
   005C 8A 82               165 	mov	dpl,r2
   005E 8B 83               166 	mov	dph,r3
   0060 8C F0               167 	mov	b,r4
   0062 12s00r00            168 	lcall	__gptrget
   0065 FD                  169 	mov	r5,a
   0066 1D                  170 	dec	r5
   0067 8E 82               171 	mov	dpl,r6
   0069 8F 83               172 	mov	dph,r7
   006B 88 F0               173 	mov	b,r0
   006D 12s00r00            174 	lcall	__gptrget
   0070 F5*00               175 	mov	_T6963C_readFrom_PARM_2,a
   0072 8D 82               176 	mov	dpl,r5
   0074 C0 02               177 	push	ar2
   0076 C0 03               178 	push	ar3
   0078 C0 04               179 	push	ar4
   007A C0 06               180 	push	ar6
   007C C0 07               181 	push	ar7
   007E C0 00               182 	push	ar0
   0080 12s00r00            183 	lcall	_T6963C_readFrom
   0083 E5 82               184 	mov	a,dpl
   0085 D0 00               185 	pop	ar0
   0087 D0 07               186 	pop	ar7
   0089 D0 06               187 	pop	ar6
   008B D0 04               188 	pop	ar4
   008D D0 03               189 	pop	ar3
   008F D0 02               190 	pop	ar2
   0091 70 18               191 	jnz	00111$
                            192 ;	../fruit.c:29: position->x--;
   0093 8A 82               193 	mov	dpl,r2
   0095 8B 83               194 	mov	dph,r3
   0097 8C F0               195 	mov	b,r4
   0099 12s00r00            196 	lcall	__gptrget
   009C FD                  197 	mov	r5,a
   009D 1D                  198 	dec	r5
   009E 8A 82               199 	mov	dpl,r2
   00A0 8B 83               200 	mov	dph,r3
   00A2 8C F0               201 	mov	b,r4
   00A4 ED                  202 	mov	a,r5
   00A5 12s00r00            203 	lcall	__gptrput
   00A8 02s01rD9            204 	ljmp	00112$
   00AB                     205 00111$:
                            206 ;	../fruit.c:30: }else if(T6963C_readFrom(position->x+1, position->y) == EMPTY){
   00AB 8A 82               207 	mov	dpl,r2
   00AD 8B 83               208 	mov	dph,r3
   00AF 8C F0               209 	mov	b,r4
   00B1 12s00r00            210 	lcall	__gptrget
   00B4 FD                  211 	mov	r5,a
   00B5 0D                  212 	inc	r5
   00B6 8E 82               213 	mov	dpl,r6
   00B8 8F 83               214 	mov	dph,r7
   00BA 88 F0               215 	mov	b,r0
   00BC 12s00r00            216 	lcall	__gptrget
   00BF F5*00               217 	mov	_T6963C_readFrom_PARM_2,a
   00C1 8D 82               218 	mov	dpl,r5
   00C3 C0 02               219 	push	ar2
   00C5 C0 03               220 	push	ar3
   00C7 C0 04               221 	push	ar4
   00C9 C0 06               222 	push	ar6
   00CB C0 07               223 	push	ar7
   00CD C0 00               224 	push	ar0
   00CF 12s00r00            225 	lcall	_T6963C_readFrom
   00D2 E5 82               226 	mov	a,dpl
   00D4 D0 00               227 	pop	ar0
   00D6 D0 07               228 	pop	ar7
   00D8 D0 06               229 	pop	ar6
   00DA D0 04               230 	pop	ar4
   00DC D0 03               231 	pop	ar3
   00DE D0 02               232 	pop	ar2
   00E0 70 18               233 	jnz	00108$
                            234 ;	../fruit.c:31: position->x++;
   00E2 8A 82               235 	mov	dpl,r2
   00E4 8B 83               236 	mov	dph,r3
   00E6 8C F0               237 	mov	b,r4
   00E8 12s00r00            238 	lcall	__gptrget
   00EB FD                  239 	mov	r5,a
   00EC 0D                  240 	inc	r5
   00ED 8A 82               241 	mov	dpl,r2
   00EF 8B 83               242 	mov	dph,r3
   00F1 8C F0               243 	mov	b,r4
   00F3 ED                  244 	mov	a,r5
   00F4 12s00r00            245 	lcall	__gptrput
   00F7 02s01rD9            246 	ljmp	00112$
   00FA                     247 00108$:
                            248 ;	../fruit.c:32: }else if(T6963C_readFrom(position->x, position->y+1) == EMPTY){
   00FA 8A 82               249 	mov	dpl,r2
   00FC 8B 83               250 	mov	dph,r3
   00FE 8C F0               251 	mov	b,r4
   0100 12s00r00            252 	lcall	__gptrget
   0103 FD                  253 	mov	r5,a
   0104 8E 82               254 	mov	dpl,r6
   0106 8F 83               255 	mov	dph,r7
   0108 88 F0               256 	mov	b,r0
   010A 12s00r00            257 	lcall	__gptrget
   010D 04                  258 	inc	a
   010E F5*00               259 	mov	_T6963C_readFrom_PARM_2,a
   0110 8D 82               260 	mov	dpl,r5
   0112 C0 02               261 	push	ar2
   0114 C0 03               262 	push	ar3
   0116 C0 04               263 	push	ar4
   0118 C0 06               264 	push	ar6
   011A C0 07               265 	push	ar7
   011C C0 00               266 	push	ar0
   011E 12s00r00            267 	lcall	_T6963C_readFrom
   0121 E5 82               268 	mov	a,dpl
   0123 D0 00               269 	pop	ar0
   0125 D0 07               270 	pop	ar7
   0127 D0 06               271 	pop	ar6
   0129 D0 04               272 	pop	ar4
   012B D0 03               273 	pop	ar3
   012D D0 02               274 	pop	ar2
   012F 70 18               275 	jnz	00105$
                            276 ;	../fruit.c:33: position->y++;
   0131 8E 82               277 	mov	dpl,r6
   0133 8F 83               278 	mov	dph,r7
   0135 88 F0               279 	mov	b,r0
   0137 12s00r00            280 	lcall	__gptrget
   013A FD                  281 	mov	r5,a
   013B 0D                  282 	inc	r5
   013C 8E 82               283 	mov	dpl,r6
   013E 8F 83               284 	mov	dph,r7
   0140 88 F0               285 	mov	b,r0
   0142 ED                  286 	mov	a,r5
   0143 12s00r00            287 	lcall	__gptrput
   0146 02s01rD9            288 	ljmp	00112$
   0149                     289 00105$:
                            290 ;	../fruit.c:34: }else if(T6963C_readFrom(position->x, position->y-1) == EMPTY){
   0149 8A 82               291 	mov	dpl,r2
   014B 8B 83               292 	mov	dph,r3
   014D 8C F0               293 	mov	b,r4
   014F 12s00r00            294 	lcall	__gptrget
   0152 FD                  295 	mov	r5,a
   0153 8E 82               296 	mov	dpl,r6
   0155 8F 83               297 	mov	dph,r7
   0157 88 F0               298 	mov	b,r0
   0159 12s00r00            299 	lcall	__gptrget
   015C 14                  300 	dec	a
   015D F5*00               301 	mov	_T6963C_readFrom_PARM_2,a
   015F 8D 82               302 	mov	dpl,r5
   0161 C0 02               303 	push	ar2
   0163 C0 03               304 	push	ar3
   0165 C0 04               305 	push	ar4
   0167 C0 06               306 	push	ar6
   0169 C0 07               307 	push	ar7
   016B C0 00               308 	push	ar0
   016D 12s00r00            309 	lcall	_T6963C_readFrom
   0170 E5 82               310 	mov	a,dpl
   0172 D0 00               311 	pop	ar0
   0174 D0 07               312 	pop	ar7
   0176 D0 06               313 	pop	ar6
   0178 D0 04               314 	pop	ar4
   017A D0 03               315 	pop	ar3
   017C D0 02               316 	pop	ar2
   017E 70 17               317 	jnz	00102$
                            318 ;	../fruit.c:35: position->y--;
   0180 8E 82               319 	mov	dpl,r6
   0182 8F 83               320 	mov	dph,r7
   0184 88 F0               321 	mov	b,r0
   0186 12s00r00            322 	lcall	__gptrget
   0189 FD                  323 	mov	r5,a
   018A 1D                  324 	dec	r5
   018B 8E 82               325 	mov	dpl,r6
   018D 8F 83               326 	mov	dph,r7
   018F 88 F0               327 	mov	b,r0
   0191 ED                  328 	mov	a,r5
   0192 12s00r00            329 	lcall	__gptrput
   0195 80 42               330 	sjmp	00112$
   0197                     331 00102$:
                            332 ;	../fruit.c:37: FRUIT_random(position);
   0197 8A 82               333 	mov	dpl,r2
   0199 8B 83               334 	mov	dph,r3
   019B 8C F0               335 	mov	b,r4
   019D C0 02               336 	push	ar2
   019F C0 03               337 	push	ar3
   01A1 C0 04               338 	push	ar4
   01A3 C0 06               339 	push	ar6
   01A5 C0 07               340 	push	ar7
   01A7 C0 00               341 	push	ar0
   01A9 12s01rF6            342 	lcall	_FRUIT_random
   01AC D0 00               343 	pop	ar0
   01AE D0 07               344 	pop	ar7
   01B0 D0 06               345 	pop	ar6
   01B2 D0 04               346 	pop	ar4
   01B4 D0 03               347 	pop	ar3
   01B6 D0 02               348 	pop	ar2
                            349 ;	../fruit.c:38: FRUIT_placeInFreeSpace(position); 
   01B8 8A 82               350 	mov	dpl,r2
   01BA 8B 83               351 	mov	dph,r3
   01BC 8C F0               352 	mov	b,r4
   01BE C0 02               353 	push	ar2
   01C0 C0 03               354 	push	ar3
   01C2 C0 04               355 	push	ar4
   01C4 C0 06               356 	push	ar6
   01C6 C0 07               357 	push	ar7
   01C8 C0 00               358 	push	ar0
   01CA 12s00r00            359 	lcall	_FRUIT_placeInFreeSpace
   01CD D0 00               360 	pop	ar0
   01CF D0 07               361 	pop	ar7
   01D1 D0 06               362 	pop	ar6
   01D3 D0 04               363 	pop	ar4
   01D5 D0 03               364 	pop	ar3
   01D7 D0 02               365 	pop	ar2
   01D9                     366 00112$:
                            367 ;	../fruit.c:40: T6963C_writeAt(position->x, position->y, FRUIT);
   01D9 8A 82               368 	mov	dpl,r2
   01DB 8B 83               369 	mov	dph,r3
   01DD 8C F0               370 	mov	b,r4
   01DF 12s00r00            371 	lcall	__gptrget
   01E2 FA                  372 	mov	r2,a
   01E3 8E 82               373 	mov	dpl,r6
   01E5 8F 83               374 	mov	dph,r7
   01E7 88 F0               375 	mov	b,r0
   01E9 12s00r00            376 	lcall	__gptrget
   01EC F5*00               377 	mov	_T6963C_writeAt_PARM_2,a
   01EE 75*00 95            378 	mov	_T6963C_writeAt_PARM_3,#0x95
   01F1 8A 82               379 	mov	dpl,r2
   01F3 02s00r00            380 	ljmp	_T6963C_writeAt
                            381 ;------------------------------------------------------------
                            382 ;Allocation info for local variables in function 'FRUIT_random'
                            383 ;------------------------------------------------------------
                            384 ;position                  Allocated to registers r2 r3 r4 
                            385 ;rx                        Allocated to registers r5 
                            386 ;ry                        Allocated to registers r6 
                            387 ;------------------------------------------------------------
                            388 ;	../fruit.c:51: void FRUIT_random(Position *position) {
                            389 ;	-----------------------------------------
                            390 ;	 function FRUIT_random
                            391 ;	-----------------------------------------
   01F6                     392 _FRUIT_random:
   01F6 AA 82               393 	mov	r2,dpl
   01F8 AB 83               394 	mov	r3,dph
   01FA AC F0               395 	mov	r4,b
                            396 ;	../fruit.c:54: char rx = (char)(rand() % (SNAKE_LIMIT_X1-SNAKE_LIMIT_X0) + SNAKE_LIMIT_X0);
   01FC C0 02               397 	push	ar2
   01FE C0 03               398 	push	ar3
   0200 C0 04               399 	push	ar4
   0202 12s00r00            400 	lcall	_rand
   0205 75*00 1D            401 	mov	__modsint_PARM_2,#0x1D
   0208 75*01 00            402 	mov	(__modsint_PARM_2 + 1),#0x00
   020B 12s00r00            403 	lcall	__modsint
   020E AD 82               404 	mov	r5,dpl
                            405 ;	../fruit.c:55: char ry = (char)(rand() % (SNAKE_LIMIT_Y1-SNAKE_LIMIT_Y0) + SNAKE_LIMIT_Y0);	
   0210 C0 05               406 	push	ar5
   0212 12s00r00            407 	lcall	_rand
   0215 75*00 0F            408 	mov	__modsint_PARM_2,#0x0F
   0218 75*01 00            409 	mov	(__modsint_PARM_2 + 1),#0x00
   021B 12s00r00            410 	lcall	__modsint
   021E AE 82               411 	mov	r6,dpl
   0220 AF 83               412 	mov	r7,dph
   0222 D0 05               413 	pop	ar5
   0224 D0 04               414 	pop	ar4
   0226 D0 03               415 	pop	ar3
   0228 D0 02               416 	pop	ar2
                            417 ;	../fruit.c:56: position->x = rx;
   022A 8A 82               418 	mov	dpl,r2
   022C 8B 83               419 	mov	dph,r3
   022E 8C F0               420 	mov	b,r4
   0230 ED                  421 	mov	a,r5
   0231 12s00r00            422 	lcall	__gptrput
                            423 ;	../fruit.c:57: position->y = ry;
   0234 0A                  424 	inc	r2
   0235 BA 00 01            425 	cjne	r2,#0x00,00103$
   0238 0B                  426 	inc	r3
   0239                     427 00103$:
   0239 8A 82               428 	mov	dpl,r2
   023B 8B 83               429 	mov	dph,r3
   023D 8C F0               430 	mov	b,r4
   023F EE                  431 	mov	a,r6
   0240 02s00r00            432 	ljmp	__gptrput
                            433 ;------------------------------------------------------------
                            434 ;Allocation info for local variables in function 'FRUIT_place'
                            435 ;------------------------------------------------------------
                            436 ;position                  Allocated with name '_FRUIT_place_position_1_1'
                            437 ;------------------------------------------------------------
                            438 ;	../fruit.c:65: void FRUIT_place() {
                            439 ;	-----------------------------------------
                            440 ;	 function FRUIT_place
                            441 ;	-----------------------------------------
   0243                     442 _FRUIT_place:
                            443 ;	../fruit.c:67: FRUIT_random(&position);
   0243 90s00r00            444 	mov	dptr,#_FRUIT_place_position_1_1
   0246 75 F0 40            445 	mov	b,#0x40
   0249 12s01rF6            446 	lcall	_FRUIT_random
                            447 ;	../fruit.c:68: FRUIT_placeInFreeSpace(&position);
   024C 90s00r00            448 	mov	dptr,#_FRUIT_place_position_1_1
   024F 75 F0 40            449 	mov	b,#0x40
   0252 02s00r00            450 	ljmp	_FRUIT_placeInFreeSpace
                            451 	.area CSEG    (CODE)
                            452 	.area CONST   (CODE)
                            453 	.area XINIT   (CODE)
                            454 	.area CABS    (ABS,CODE)
